#!/usr/bin/env python3

"""
tinc sync: client
-----------------

"""

import argparse, os, sys, subprocess, pathlib, traceback, shutil

# Setup and parse command line arguments
parser = argparse.ArgumentParser()
parser.add_argument('--tinc-cfg-root', help='where does tinc look for configuration', type=str, default='/usr/local/etc/tinc')
parser.add_argument('-l', '--list', help='list configured tinc vpn networks on this client', action='store_true')
parser.add_argument('-n', '--network', help='name of the network to administer', type=str)
parser.add_argument('--add', help='add a new network with name specified by --network', action='store_true')
parser.add_argument('--bootstrap', help='do a manual sync from the provided file', type=str)
parser.add_argument('--run', help='run the network in detached mode for debugging purposes', action='store_true')
args = parser.parse_args()

try:

    ########################################
    # Check that the config directory exists
    if not os.path.isdir(args.tinc_cfg_root):
        print('Tinc configuration root path "%s" does not exist or is not a directory' % args.tinc_cfg_root)
        sys.exit(1)


    ###################
    # Add a new network
    if args.add:
        if not args.network:
            print('Network name required to add')
            sys.exit(1)

        if os.path.isdir('%s/%s' % (args.tinc_cfg_root, args.network)):
            print('Network with name "%s" already exists. Cannot add a new one' % args.network)
            sys.exit(1)

        print('Adding new network "%s"' % args.network)
        os.mkdir('%s/%s' % (args.tinc_cfg_root, args.network))
        command = ['tincd', '--config=%s/%s' % (args.tinc_cfg_root, args.network), '--generate-keys=4096']
        subprocess.run(' '.join(command), shell=True, input='\n\n', encoding='ascii', check=False)

        if not os.path.isfile('%s/%s/rsa_key.priv' % (args.tinc_cfg_root, args.network)):
            print('ERROR: Could not find the private key.')
            sys.exit(1)

        if not os.path.isfile('%s/%s/rsa_key.pub' % (args.tinc_cfg_root, args.network)):
            print('ERROR: Could not find the public key.')
            sys.exit(1)

        public_key = pathlib.Path('%s/%s/rsa_key.pub' % (args.tinc_cfg_root, args.network)).read_text()
        print('Give the following public key to your tinc administrator for network "%s":' % args.network)
        print(public_key)
    

    #################################
    # Process a server bootstrap file
    if args.bootstrap:
        if not args.network:
            print('Network name required to bootstrap')
            sys.exit(1)

        if not os.path.isdir('%s/%s' % (args.tinc_cfg_root, args.network)):
            print('Network with name "%s" does not exist. Please add network before bootstrapping' % args.network)
            sys.exit(1)

        if not os.path.isfile(args.bootstrap):
            print('bootstrap file not found at location "%s"' % args.bootstrap)
            sys.exit(1)

        clear_folder = os.listdir('%s/%s' % (args.tinc_cfg_root, args.network))
        clear_folder.remove('rsa_key.priv')
        clear_folder.remove('rsa_key.pub')
        for cf in clear_folder:
            full_path = '%s/%s/%s' % (args.tinc_cfg_root, args.network, cf)
            if os.path.isdir(full_path):
                shutil.rmtree(full_path)
            else:
                os.remove(full_path)

        try:
            command = ['tar', '-xf', args.bootstrap, '-C', '%s/%s' % (args.tinc_cfg_root, args.network)]
            subprocess.run(' '.join(command), shell=True, check=True)
        except subprocess.CalledProcessError as e:
            print('ERROR: Could not extract bootstrap archive.')
            sys.exit(1)

        print('For auto-startup, see: https://www.tinc-vpn.org/documentation/Automatically-starting-tinc.html')


    ########################
    # List existing networks
    if args.list:
        print('Current tinc configuration:')
        
        cfg_folder_files = os.listdir(args.tinc_cfg_root)
        
        for cff in cfg_folder_files:
            if not os.path.isdir('%s/%s' % (args.tinc_cfg_root, cff)):
                continue
            if not os.path.isfile('%s/%s/tinc.conf' % (args.tinc_cfg_root, cff)):
                continue

            print(cff)


    #########################
    # Run tincd in debug mode

    if args.run:
        if not args.network:
            print('Network name required to run')
            sys.exit(1)

        print('Running network "%s" in debug mode' % args.network)
        command = ['tincd', '--config=%s/%s' % (args.tinc_cfg_root, args.network), '-D', '-d3']
        subprocess.run(' '.join(command), shell=True, check=True)

except PermissionError as e:
    print(e)
    sys.exit(1)

except KeyboardInterrupt:
    sys.exit(1)

except Exception as e:
    print('Caught some unhandled exception. YOU SHOULD TELL THE MAINTAINER THAT SOMETHING WAS UNHANDLED AND NEEDS LOOKING AT')
    print('Details:')
    print(e)
    traceback.print_exc()
    sys.exit(1)
